@model ddac_bookmate.Models.Book

@{
    ViewData["Title"] = "Add New Book";
}

@section Styles {
    <link href="https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/css/tom-select.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/admin.css" />
}

<div class="admin-container">
    <div class="admin-header">
        <h1>Add New Book</h1>
        <p class="admin-subtitle">Add a new book to the collection</p>
    </div>

    <div class="admin-content">
        <div class="form-container">
            <form asp-action="AddBook" method="post" class="book-form" id="addBookForm">
                <div class="form-section">
                    <div class="form-group">
                        <label asp-for="BookName">Book Title</label>
                        <input asp-for="BookName" class="form-control" placeholder="Enter book title" required />
                    </div>

                    <div class="form-group">
                        <label asp-for="Synopsis">Synopsis</label>
                        <textarea asp-for="Synopsis" class="form-control" rows="4" placeholder="Enter book synopsis"></textarea>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label asp-for="BookPrice">Price ($)</label>
                            <input asp-for="BookPrice" type="number" step="0.01" min="0" class="form-control" placeholder="0.00" required />
                        </div>

                        <div class="form-group">
                            <label asp-for="BookPublishedDate">Publication Date</label>
                            <input asp-for="BookPublishedDate" type="date" class="form-control" required />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label asp-for="StarRating">Rating</label>
                            <select asp-for="StarRating" class="form-control" required>
                                <option value="">Select Rating</option>
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <option value="@i">@i Star@(i > 1 ? "s" : "")</option>
                                }
                            </select>
                        </div>

                        <div class="form-group">
                            <label asp-for="LanguageId">Language</label>
                            <select asp-for="LanguageId" asp-items="@(new SelectList(ViewBag.Languages, "LanguageId", "Name"))" class="form-control" required>
                                <option value="">Select Language</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label>Authors</label>
                            <select id="author-select" multiple placeholder="Search or add authors...">
                                @foreach (var author in ViewBag.Authors)
                                {
                                    <option value="@author.AuthorId">@author.Name</option>
                                }
                            </select>
                            <input type="hidden" name="SelectedAuthors" id="selectedAuthorsInput" />
                        </div>

                        <div class="form-group">
                            <label>Publishers</label>
                            <select id="publisher-select" multiple placeholder="Search or add publishers...">
                                @foreach (var publisher in ViewBag.Publishers)
                                {
                                    <option value="@publisher.PublisherId">@publisher.Name</option>
                                }
                            </select>
                            <input type="hidden" name="SelectedPublishers" id="selectedPublishersInput" />
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Genres</label>
                        <select id="genre-select" name="SelectedGenres" multiple placeholder="Select genres...">
                            @foreach (var genre in ViewBag.Genres)
                            {
                                <option value="@genre.GenreId">@genre.Name</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="form-actions">
                    <button type="submit" class="action-button edit-button">
                        <i class="bi bi-plus-lg"></i>
                        Add Book
                    </button>
                    <a asp-action="Index" class="action-button delete-button">
                        <i class="bi bi-x-lg"></i>
                        Cancel
                    </a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/js/tom-select.complete.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize TomSelect for Authors
            const authorSelect = new TomSelect('#author-select', {
                plugins: ['remove_button'],
                maxItems: null,
                valueField: 'AuthorId',
                labelField: 'Name',
                searchField: 'Name',
                create: true,
                createOnBlur: true,
                createFilter: function(input) {
                    return input.length >= 2;
                },
                onItemAdd: function(value) {
                    updateHiddenInput('selectedAuthorsInput', this.items);
                }
            });

            // Initialize TomSelect for Publishers
            const publisherSelect = new TomSelect('#publisher-select', {
                plugins: ['remove_button'],
                maxItems: null,
                valueField: 'PublisherId',
                labelField: 'Name',
                searchField: 'Name',
                create: true,
                createOnBlur: true,
                createFilter: function(input) {
                    return input.length >= 2;
                },
                onItemAdd: function(value) {
                    updateHiddenInput('selectedPublishersInput', this.items);
                }
            });

            // Initialize TomSelect for Genres
            const genreSelect = new TomSelect('select[name="SelectedGenres"]', {
                plugins: ['remove_button'],
                maxItems: null,
                valueField: 'GenreId',
                labelField: 'Name',
                searchField: 'Name',
                create: false,
                onItemAdd: function(value) {
                    console.log('Genre added:', value);
                }
            });

            function updateHiddenInput(inputId, values) {
                const input = document.getElementById(inputId);
                input.value = JSON.stringify(values);
                console.log(`Updated ${inputId}:`, input.value);
            }
        });
    </script>
}